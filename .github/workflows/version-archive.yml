name: Version Archive Action

on:
  workflow_call:
    inputs:
      build_dir:
        description: '构建产物目录（相对路径）'
        required: true
        type: string
        default: 'dist'
      archive_branch:
        description: '归档分支名称'
        required: false
        type: string
        default: 'gh-pages'
      archive_dir:
        description: '归档目录名称'
        required: false
        type: string
        default: 'versions'
      force_archive:
        description: '强制归档（覆盖已存在版本）'
        required: false
        type: boolean
        default: false
      enable_pages:
        description: '是否部署到 GitHub Pages'
        required: false
        type: boolean
        default: true
      path_prefix:
        description: '绝对路径前缀，留空自动检测'
        required: false
        type: string
        default: ''
    # GITHUB_TOKEN 是系统自动提供的，无需在此声明

jobs:
  archive-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout 调用方仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout 版本归档工具
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/version-stage-workflow
        path: .version-archive-tools
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 安装版本归档工具依赖
      run: |
        cd .version-archive-tools
        npm install --production

    - name: 下载构建产物
      id: download_artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./build-output
      continue-on-error: true

    - name: 检查 artifact 下载状态
      run: |
        if [ "${{ steps.download_artifacts.outcome }}" = "failure" ]; then
          echo "❌ Artifact 下载失败！"
          echo "💡 可能的原因："
          echo "   1. build job 没有成功上传 artifact"
          echo "   2. artifact 名称不匹配（期望: build-artifacts）"
          echo "   3. artifact 已过期或不存在"
          echo ""
          echo "🔍 请检查调用方工作流的 build job："
          echo "   - uses: actions/upload-artifact@v4"
          echo "     with:"
          echo "       name: build-artifacts  # 👈 必须是这个名称"
          echo "       path: your-build-dir"
          exit 1
        fi
        
        echo "✅ Artifact 下载成功"

    - name: 验证构建产物目录
      run: |
        echo "🔍 检查下载的构建产物："
        ls -la ./build-output/
        
        # 确定构建产物的实际路径
        if [ "${{ inputs.build_dir }}" = "." ]; then
          BUILD_PATH="./build-output"
        else
          BUILD_PATH="./build-output/${{ inputs.build_dir }}"
        fi
        
        echo "🎯 目标构建路径: $BUILD_PATH"
        
        if [ -d "$BUILD_PATH" ]; then
          echo "✅ 构建产物目录存在: $BUILD_PATH"
          echo "📁 目录内容："
          ls -la "$BUILD_PATH"
        else
          echo "❌ 构建产物目录不存在: $BUILD_PATH"
          echo "💡 可能的原因："
          echo "   1. build_dir 参数设置错误（当前: ${{ inputs.build_dir }}）"
          echo "   2. 调用方上传的 artifact 目录结构不正确"
          echo ""
          echo "📋 实际的 artifact 结构："
          find ./build-output -type d 2>/dev/null || echo "   (空目录)"
          echo ""
          echo "📋 artifact 中的所有文件："
          find ./build-output -type f 2>/dev/null || echo "   (无文件)"
          exit 1
        fi

    - name: 获取版本号
      id: get_version
      run: |
        # 只从 package.json 获取版本号
        if [ -f "package.json" ]; then
          PACKAGE_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "")
          if [ -n "$PACKAGE_VERSION" ]; then
            VERSION="v$PACKAGE_VERSION"
          else
            echo "❌ 无法从 package.json 读取版本号"
            echo "💡 请确保 package.json 包含有效的 version 字段"
            exit 1
          fi
        else
          echo "❌ 未找到 package.json 文件"
          echo "💡 此工作流需要项目包含 package.json 文件并定义 version 字段"
          echo "📋 当前目录内容："
          ls -la
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "clean_version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "🏷️ 从 package.json 获取版本号: $VERSION"

    - name: 检查归档分支是否存在
      id: check_branch
      run: |
        # 检查远程分支是否存在
        if git ls-remote --heads origin ${{ inputs.archive_branch }} | grep -q ${{ inputs.archive_branch }}; then
          echo "branch_exists=true" >> $GITHUB_OUTPUT
          echo "✅ 归档分支 ${{ inputs.archive_branch }} 已存在"
        else
          echo "branch_exists=false" >> $GITHUB_OUTPUT
          echo "📝 归档分支 ${{ inputs.archive_branch }} 不存在，需要创建"
        fi

    - name: 检出现有归档分支
      if: steps.check_branch.outputs.branch_exists == 'true'
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.archive_branch }}
        path: archive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 创建新的归档分支
      if: steps.check_branch.outputs.branch_exists == 'false'
      run: |
        echo "📝 创建新的归档分支: ${{ inputs.archive_branch }}"
        
        # 创建临时目录来初始化分支
        mkdir -p /tmp/init-archive
        cd /tmp/init-archive
        
        # 初始化新的 git 仓库
        git init
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        
        # 创建初始内容
        echo "# 版本归档分支" > README.md
        echo "" >> README.md
        echo "此分支用于存储项目的历史版本。" >> README.md
        echo "" >> README.md
        echo "- 归档目录: ${{ inputs.archive_dir }}" >> README.md
        echo "- 创建时间: $(date)" >> README.md
        
        mkdir -p ${{ inputs.archive_dir }}
        
        # 提交并推送到远程
        git add .
        git commit -m "Initialize archive branch ${{ inputs.archive_branch }}"
        git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push -u origin HEAD:${{ inputs.archive_branch }}
        
        # 回到工作目录
        cd ${{ github.workspace }}
        
        # 创建工作树
        git worktree add archive ${{ inputs.archive_branch }}

    - name: 设置归档分支工作树
      if: steps.check_branch.outputs.branch_exists == 'true'
      run: |
        echo "✅ 归档分支已存在，设置工作树"
        git worktree add archive ${{ inputs.archive_branch }} 2>/dev/null || true
        
        # 确保归档目录存在
        mkdir -p archive/${{ inputs.archive_dir }}
        echo "📁 归档目录结构："
        ls -la archive/

    - name: 复制版本切换器资源
      run: |
        # 确保归档目录存在
        mkdir -p archive/${{ inputs.archive_dir }}
        
        # 复制版本切换器文件到归档根目录（主页面需要）
        cp .version-archive-tools/src/version-switcher-iframe.js archive/
        
        # 也复制到版本目录（兼容性）
        cp .version-archive-tools/src/version-switcher.js archive/${{ inputs.archive_dir }}/
        cp .version-archive-tools/src/version-switcher.css archive/${{ inputs.archive_dir }}/
        
        echo "✅ 版本切换器资源已复制到归档目录"

    - name: 执行版本归档
      run: |
        echo "🔍 调试信息："
        echo "版本号: ${{ steps.get_version.outputs.version }}"
        echo "清洁版本号: ${{ steps.get_version.outputs.clean_version }}"
        echo "构建目录: ${{ inputs.build_dir }}"
        echo "归档目录: archive/${{ inputs.archive_dir }}"
        echo "强制归档: ${{ inputs.force_archive }}"
        
        # 确定正确的构建目录路径
        if [ "${{ inputs.build_dir }}" = "." ]; then
          BUILD_PATH="../build-output"
        else
          BUILD_PATH="../build-output/${{ inputs.build_dir }}"
        fi
        
        echo "🎯 实际构建路径: $BUILD_PATH"
        
        cd .version-archive-tools
        # 构建归档命令
        ARCHIVE_CMD="node scripts/archive-version.js \
          --version=\"${{ steps.get_version.outputs.version }}\" \
          --clean-version=\"${{ steps.get_version.outputs.clean_version }}\" \
          --build-dir=\"$BUILD_PATH\" \
          --archive-dir=\"../archive/${{ inputs.archive_dir }}\" \
          --force=\"${{ inputs.force_archive }}\""
        
        # 如果指定了路径前缀，添加到命令中
        if [ -n "${{ inputs.path_prefix }}" ]; then
          ARCHIVE_CMD="$ARCHIVE_CMD --path-prefix=\"${{ inputs.path_prefix }}\""
          echo "🎯 使用指定的路径前缀: ${{ inputs.path_prefix }}"
        else
          echo "🔍 将自动检测路径前缀"
        fi
        
        # 执行归档命令
        eval $ARCHIVE_CMD

    - name: 更新版本索引
      run: |
        cd .version-archive-tools
        node scripts/update-version-index.js \
          --archive-dir="../archive/${{ inputs.archive_dir }}" \
          --version="${{ steps.get_version.outputs.version }}"

    - name: 提交归档更改
      run: |
        cd archive
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        if git diff --staged --quiet; then
          echo "📝 没有更改需要提交"
        else
          git commit -m "Archive version ${{ steps.get_version.outputs.version }}"
          git push origin ${{ inputs.archive_branch }}
          echo "✅ 版本 ${{ steps.get_version.outputs.version }} 归档完成"
        fi

    - name: 检查归档目录结构
      run: |
        echo "🔍 检查归档目录结构："
        ls -la archive/
        echo ""
        echo "📋 版本目录内容："
        ls -la archive/${{ inputs.archive_dir }}/ || echo "版本目录为空"
        echo ""
        echo "📄 版本索引文件："
        if [ -f "archive/${{ inputs.archive_dir }}/index.json" ]; then
          echo "✅ index.json 存在"
          cat archive/${{ inputs.archive_dir }}/index.json
        else
          echo "❌ index.json 不存在"
        fi

    - name: 创建版本浏览主页
      run: |
        cd archive
        
        # 创建简洁的版本浏览主页
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>版本归档</title>
            <style>
                body {
                    margin: 0;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: #f5f5f5;
                }
                .main-content {
                    margin: 0;
                    padding: 0;
                    width: 100vw;
                    height: 100vh;
                    position: relative;
                }
                #version-iframe {
                    width: 100%;
                    height: 100%;
                    border: none;
                    display: block;
                }
                .loading {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    color: #666;
                    font-size: 18px;
                }
            </style>
        </head>
        <body>
            <div class="main-content">
                <div class="loading" id="loading">正在加载最新版本...</div>
                <iframe id="version-iframe" style="display: none;"></iframe>
            </div>
            
            <!-- 版本切换器 -->
            <script src="version-switcher-iframe.js"></script>
        </body>
        </html>
        EOF
        
        echo "✅ 创建了版本浏览主页"

    - name: 上传归档产物到 Pages
      if: ${{ inputs.enable_pages }}
      uses: actions/upload-pages-artifact@v4
      with:
        path: archive

    - name: 部署到 GitHub Pages
      id: deployment
      if: ${{ inputs.enable_pages }}
      uses: actions/deploy-pages@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}